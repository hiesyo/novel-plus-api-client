/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Novel Plus API
 * 小説共有プラットフォームのAPI仕様
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type { Bookmark } from "../../../novel-plus-backend-hono/src/generated/types/schemas-bookmark";

import { customInstance } from "../../lib/custom-instance";
import type { ErrorType } from "../../lib/custom-instance";

/**
 * 指定小説をブックマークに追加
 * @summary ブックマーク追加
 */
export const postNovelsIdBookmark = (id: number, signal?: AbortSignal) => {
  return customInstance<Bookmark>({
    url: `http://localhost:8080/api/novels/${id}/bookmark`,
    method: "POST",
    signal,
  });
};

export const getPostNovelsIdBookmarkMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postNovelsIdBookmark>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postNovelsIdBookmark>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["postNovelsIdBookmark"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postNovelsIdBookmark>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return postNovelsIdBookmark(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostNovelsIdBookmarkMutationResult = NonNullable<
  Awaited<ReturnType<typeof postNovelsIdBookmark>>
>;

export type PostNovelsIdBookmarkMutationError = ErrorType<void>;

/**
 * @summary ブックマーク追加
 */
export const usePostNovelsIdBookmark = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postNovelsIdBookmark>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postNovelsIdBookmark>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getPostNovelsIdBookmarkMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * 指定小説のブックマークを削除
 * @summary ブックマーク削除
 */
export const deleteNovelsIdBookmark = (id: number) => {
  return customInstance<void>({
    url: `http://localhost:8080/api/novels/${id}/bookmark`,
    method: "DELETE",
  });
};

export const getDeleteNovelsIdBookmarkMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteNovelsIdBookmark>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteNovelsIdBookmark>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["deleteNovelsIdBookmark"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteNovelsIdBookmark>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteNovelsIdBookmark(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteNovelsIdBookmarkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteNovelsIdBookmark>>
>;

export type DeleteNovelsIdBookmarkMutationError = ErrorType<void>;

/**
 * @summary ブックマーク削除
 */
export const useDeleteNovelsIdBookmark = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteNovelsIdBookmark>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteNovelsIdBookmark>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteNovelsIdBookmarkMutationOptions(options);

  return useMutation(mutationOptions);
};
