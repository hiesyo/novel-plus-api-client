/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Novel Plus API
 * Â∞èË™¨ÂÖ±Êúâ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„ÅÆAPI‰ªïÊßò
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { Tag } from "../../../novel-plus-backend-hono/src/generated/types/schemas-tag";
import type {
  GetTagsIdNovels200,
  GetTagsIdNovelsParams,
  GetTagsParams,
} from "../../../novel-plus-backend-hono/src/generated/types";

import { customInstance } from "../../lib/custom-instance";
import type { ErrorType } from "../../lib/custom-instance";

/**
 * „Çø„Ç∞‰∏ÄË¶ß„ÇíÂèñÂæó
 * @summary „Çø„Ç∞‰∏ÄË¶ßÂèñÂæó
 */
export const getTags = (params?: GetTagsParams, signal?: AbortSignal) => {
  return customInstance<Tag[]>({
    url: `http://localhost:8080/api/tags`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetTagsQueryKey = (params?: GetTagsParams) => {
  return [
    `http://localhost:8080/api/tags`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetTagsInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getTags>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTagsParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getTags>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTagsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTags>>> = ({
    signal,
    pageParam,
  }) =>
    getTags({ ...params, nextPage: pageParam || params?.["nextPage"] }, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTags>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTagsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTags>>
>;
export type GetTagsInfiniteQueryError = ErrorType<unknown>;

/**
 * @summary „Çø„Ç∞‰∏ÄË¶ßÂèñÂæó
 */

export function useGetTagsInfinite<
  TData = Awaited<ReturnType<typeof getTags>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTagsParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getTags>>,
      TError,
      TData
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetTagsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetTagsQueryOptions = <
  TData = Awaited<ReturnType<typeof getTags>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTagsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getTags>>, TError, TData>;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTagsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTags>>> = ({
    signal,
  }) => getTags(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTags>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTagsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTags>>
>;
export type GetTagsQueryError = ErrorType<unknown>;

/**
 * @summary „Çø„Ç∞‰∏ÄË¶ßÂèñÂæó
 */

export function useGetTags<
  TData = Awaited<ReturnType<typeof getTags>>,
  TError = ErrorType<unknown>,
>(
  params?: GetTagsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getTags>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetTagsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÊåáÂÆö„Çø„Ç∞„Åå‰ªò„ÅÑ„ÅüÂ∞èË™¨‰∏ÄË¶ß„ÇíÂèñÂæó
 * @summary „Çø„Ç∞„ÅÆÂ∞èË™¨‰∏ÄË¶ßÂèñÂæó
 */
export const getTagsIdNovels = (
  id: number,
  params?: GetTagsIdNovelsParams,
  signal?: AbortSignal,
) => {
  return customInstance<GetTagsIdNovels200>({
    url: `http://localhost:8080/api/tags/${id}/novels`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetTagsIdNovelsQueryKey = (
  id: number,
  params?: GetTagsIdNovelsParams,
) => {
  return [
    `http://localhost:8080/api/tags/${id}/novels`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetTagsIdNovelsInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getTagsIdNovels>>,
  TError = ErrorType<void>,
>(
  id: number,
  params?: GetTagsIdNovelsParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getTagsIdNovels>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTagsIdNovelsQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTagsIdNovels>>> = ({
    signal,
    pageParam,
  }) =>
    getTagsIdNovels(
      id,
      { ...params, nextPage: pageParam || params?.["nextPage"] },
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getTagsIdNovels>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTagsIdNovelsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTagsIdNovels>>
>;
export type GetTagsIdNovelsInfiniteQueryError = ErrorType<void>;

/**
 * @summary „Çø„Ç∞„ÅÆÂ∞èË™¨‰∏ÄË¶ßÂèñÂæó
 */

export function useGetTagsIdNovelsInfinite<
  TData = Awaited<ReturnType<typeof getTagsIdNovels>>,
  TError = ErrorType<void>,
>(
  id: number,
  params?: GetTagsIdNovelsParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getTagsIdNovels>>,
      TError,
      TData
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetTagsIdNovelsInfiniteQueryOptions(
    id,
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetTagsIdNovelsQueryOptions = <
  TData = Awaited<ReturnType<typeof getTagsIdNovels>>,
  TError = ErrorType<void>,
>(
  id: number,
  params?: GetTagsIdNovelsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getTagsIdNovels>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTagsIdNovelsQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTagsIdNovels>>> = ({
    signal,
  }) => getTagsIdNovels(id, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getTagsIdNovels>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTagsIdNovelsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTagsIdNovels>>
>;
export type GetTagsIdNovelsQueryError = ErrorType<void>;

/**
 * @summary „Çø„Ç∞„ÅÆÂ∞èË™¨‰∏ÄË¶ßÂèñÂæó
 */

export function useGetTagsIdNovels<
  TData = Awaited<ReturnType<typeof getTagsIdNovels>>,
  TError = ErrorType<void>,
>(
  id: number,
  params?: GetTagsIdNovelsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getTagsIdNovels>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetTagsIdNovelsQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
