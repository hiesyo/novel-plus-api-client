/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Novel Plus API
 * Â∞èË™¨ÂÖ±Êúâ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„ÅÆAPI‰ªïÊßò
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type {
  PostAuthLogin200,
  PostAuthLoginBody,
  PostAuthRegister201,
} from "../../../novel-plus-backend-hono/src/generated/types";
import type { DefaultError } from "../../../novel-plus-backend-hono/src/generated/types/schemas-error";
import type { UserCreate } from "../../../novel-plus-backend-hono/src/generated/types/schemas-user";

import { customInstance } from "../../lib/custom-instance";
import type { ErrorType } from "../../lib/custom-instance";

/**
 * „É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Å®„Éë„Çπ„ÉØ„Éº„Éâ„Åß„É≠„Ç∞„Ç§„É≥
 * @summary „É≠„Ç∞„Ç§„É≥
 */
export const postAuthLogin = (
  postAuthLoginBody: PostAuthLoginBody,
  signal?: AbortSignal,
) => {
  return customInstance<PostAuthLogin200>({
    url: `http://localhost:8080/api/auth/login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: postAuthLoginBody,
    signal,
  });
};

export const getPostAuthLoginMutationOptions = <
  TError = ErrorType<DefaultError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthLogin>>,
    TError,
    { data: PostAuthLoginBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthLogin>>,
  TError,
  { data: PostAuthLoginBody },
  TContext
> => {
  const mutationKey = ["postAuthLogin"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthLogin>>,
    { data: PostAuthLoginBody }
  > = (props) => {
    const { data } = props ?? {};

    return postAuthLogin(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthLogin>>
>;
export type PostAuthLoginMutationBody = PostAuthLoginBody;
export type PostAuthLoginMutationError = ErrorType<DefaultError>;

/**
 * @summary „É≠„Ç∞„Ç§„É≥
 */
export const usePostAuthLogin = <
  TError = ErrorType<DefaultError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthLogin>>,
    TError,
    { data: PostAuthLoginBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postAuthLogin>>,
  TError,
  { data: PostAuthLoginBody },
  TContext
> => {
  const mutationOptions = getPostAuthLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Êñ∞Ë¶è„É¶„Éº„Ç∂„Éº„Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÁôªÈå≤
 * @summary Êñ∞Ë¶è„É¶„Éº„Ç∂„ÉºÁôªÈå≤
 */
export const postAuthRegister = (
  userCreate: UserCreate,
  signal?: AbortSignal,
) => {
  return customInstance<PostAuthRegister201>({
    url: `http://localhost:8080/api/auth/register`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: userCreate,
    signal,
  });
};

export const getPostAuthRegisterMutationOptions = <
  TError = ErrorType<DefaultError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthRegister>>,
    TError,
    { data: UserCreate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthRegister>>,
  TError,
  { data: UserCreate },
  TContext
> => {
  const mutationKey = ["postAuthRegister"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthRegister>>,
    { data: UserCreate }
  > = (props) => {
    const { data } = props ?? {};

    return postAuthRegister(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuthRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthRegister>>
>;
export type PostAuthRegisterMutationBody = UserCreate;
export type PostAuthRegisterMutationError = ErrorType<DefaultError>;

/**
 * @summary Êñ∞Ë¶è„É¶„Éº„Ç∂„ÉºÁôªÈå≤
 */
export const usePostAuthRegister = <
  TError = ErrorType<DefaultError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthRegister>>,
    TError,
    { data: UserCreate },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postAuthRegister>>,
  TError,
  { data: UserCreate },
  TContext
> => {
  const mutationOptions = getPostAuthRegisterMutationOptions(options);

  return useMutation(mutationOptions);
};
