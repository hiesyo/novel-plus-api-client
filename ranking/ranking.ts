/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Novel Plus API
 * Â∞èË™¨ÂÖ±Êúâ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„ÅÆAPI‰ªïÊßò
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  GetRankings200,
  GetRankingsParams,
} from "../../../novel-plus-backend-hono/src/generated/types";

import { customInstance } from "../../lib/custom-instance";
import type { ErrorType } from "../../lib/custom-instance";

/**
 * ÂêÑÁ®Æ„É©„É≥„Ç≠„É≥„Ç∞„ÇíÂèñÂæó
 * @summary „É©„É≥„Ç≠„É≥„Ç∞ÂèñÂæó
 */
export const getRankings = (
  params: GetRankingsParams,
  signal?: AbortSignal,
) => {
  return customInstance<GetRankings200>({
    url: `http://localhost:8080/api/rankings`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetRankingsQueryKey = (params: GetRankingsParams) => {
  return [
    `http://localhost:8080/api/rankings`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetRankingsInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getRankings>>,
  TError = ErrorType<unknown>,
>(
  params: GetRankingsParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getRankings>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRankingsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRankings>>> = ({
    signal,
    pageParam,
  }) =>
    getRankings(
      { ...params, nextPage: pageParam || params?.["nextPage"] },
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getRankings>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRankingsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRankings>>
>;
export type GetRankingsInfiniteQueryError = ErrorType<unknown>;

/**
 * @summary „É©„É≥„Ç≠„É≥„Ç∞ÂèñÂæó
 */

export function useGetRankingsInfinite<
  TData = Awaited<ReturnType<typeof getRankings>>,
  TError = ErrorType<unknown>,
>(
  params: GetRankingsParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getRankings>>,
      TError,
      TData
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetRankingsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetRankingsQueryOptions = <
  TData = Awaited<ReturnType<typeof getRankings>>,
  TError = ErrorType<unknown>,
>(
  params: GetRankingsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRankings>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRankingsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRankings>>> = ({
    signal,
  }) => getRankings(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRankings>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRankingsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRankings>>
>;
export type GetRankingsQueryError = ErrorType<unknown>;

/**
 * @summary „É©„É≥„Ç≠„É≥„Ç∞ÂèñÂæó
 */

export function useGetRankings<
  TData = Awaited<ReturnType<typeof getRankings>>,
  TError = ErrorType<unknown>,
>(
  params: GetRankingsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getRankings>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetRankingsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
