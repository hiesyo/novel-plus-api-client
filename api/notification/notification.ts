/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Novel Plus API
 * Â∞èË™¨ÂÖ±Êúâ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„ÅÆAPI‰ªïÊßò
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  GetNotifications200,
  GetNotificationsParams,
} from "../../../types";
import type { Notification } from "../../../types/schemas-notification";

import { customInstance } from "../../custom-instance";
import type { ErrorType } from "../../custom-instance";

/**
 * „ÅäÁü•„Çâ„Åõ‰∏ÄË¶ß„ÇíÂèñÂæó
 * @summary „ÅäÁü•„Çâ„Åõ‰∏ÄË¶ßÂèñÂæó
 */
export const getNotifications = (
  params?: GetNotificationsParams,
  signal?: AbortSignal,
) => {
  return customInstance<GetNotifications200>({
    url: `http://localhost:8080/api/notifications`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetNotificationsQueryKey = (
  params?: GetNotificationsParams,
) => {
  return [
    `http://localhost:8080/api/notifications`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetNotificationsInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getNotifications>>,
  TError = ErrorType<unknown>,
>(
  params?: GetNotificationsParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getNotifications>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetNotificationsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNotifications>>
  > = ({ signal, pageParam }) =>
    getNotifications(
      { ...params, nextPage: pageParam || params?.["nextPage"] },
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getNotifications>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetNotificationsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNotifications>>
>;
export type GetNotificationsInfiniteQueryError = ErrorType<unknown>;

/**
 * @summary „ÅäÁü•„Çâ„Åõ‰∏ÄË¶ßÂèñÂæó
 */

export function useGetNotificationsInfinite<
  TData = Awaited<ReturnType<typeof getNotifications>>,
  TError = ErrorType<unknown>,
>(
  params?: GetNotificationsParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getNotifications>>,
      TError,
      TData
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetNotificationsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetNotificationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getNotifications>>,
  TError = ErrorType<unknown>,
>(
  params?: GetNotificationsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getNotifications>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetNotificationsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNotifications>>
  > = ({ signal }) => getNotifications(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getNotifications>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetNotificationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNotifications>>
>;
export type GetNotificationsQueryError = ErrorType<unknown>;

/**
 * @summary „ÅäÁü•„Çâ„Åõ‰∏ÄË¶ßÂèñÂæó
 */

export function useGetNotifications<
  TData = Awaited<ReturnType<typeof getNotifications>>,
  TError = ErrorType<unknown>,
>(
  params?: GetNotificationsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getNotifications>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetNotificationsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÊåáÂÆöID„ÅÆ„ÅäÁü•„Çâ„ÅõË©≥Á¥∞„ÇíÂèñÂæó
 * @summary „ÅäÁü•„Çâ„ÅõË©≥Á¥∞ÂèñÂæó
 */
export const getNotificationsId = (id: number, signal?: AbortSignal) => {
  return customInstance<Notification>({
    url: `http://localhost:8080/api/notifications/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetNotificationsIdQueryKey = (id: number) => {
  return [`http://localhost:8080/api/notifications/${id}`] as const;
};

export const getGetNotificationsIdInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getNotificationsId>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getNotificationsId>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNotificationsIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNotificationsId>>
  > = ({ signal }) => getNotificationsId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getNotificationsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetNotificationsIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNotificationsId>>
>;
export type GetNotificationsIdInfiniteQueryError = ErrorType<void>;

/**
 * @summary „ÅäÁü•„Çâ„ÅõË©≥Á¥∞ÂèñÂæó
 */

export function useGetNotificationsIdInfinite<
  TData = Awaited<ReturnType<typeof getNotificationsId>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getNotificationsId>>,
      TError,
      TData
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetNotificationsIdInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetNotificationsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getNotificationsId>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getNotificationsId>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNotificationsIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNotificationsId>>
  > = ({ signal }) => getNotificationsId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getNotificationsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetNotificationsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNotificationsId>>
>;
export type GetNotificationsIdQueryError = ErrorType<void>;

/**
 * @summary „ÅäÁü•„Çâ„ÅõË©≥Á¥∞ÂèñÂæó
 */

export function useGetNotificationsId<
  TData = Awaited<ReturnType<typeof getNotificationsId>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getNotificationsId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetNotificationsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
