/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Novel Plus API
 * Â∞èË™¨ÂÖ±Êúâ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„ÅÆAPI‰ªïÊßò
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { Chapter, ChapterUpdate } from "../../../types/schemas-chapter";

import { customInstance } from "../../custom-instance";
import type { ErrorType } from "../../custom-instance";

/**
 * ÊåáÂÆöÂ∞èË™¨„ÅÆÁâπÂÆö„ÅÆÁ´†„ÇíÂèñÂæó
 * @summary Á´†Ë©≥Á¥∞ÂèñÂæó
 */
export const getNovelsNovelIdChaptersChapterNumber = (
  novelId: number,
  chapterNumber: number,
  signal?: AbortSignal,
) => {
  return customInstance<Chapter>({
    url: `http://localhost:8080/api/novels/${novelId}/chapters/${chapterNumber}`,
    method: "GET",
    signal,
  });
};

export const getGetNovelsNovelIdChaptersChapterNumberQueryKey = (
  novelId: number,
  chapterNumber: number,
) => {
  return [
    `http://localhost:8080/api/novels/${novelId}/chapters/${chapterNumber}`,
  ] as const;
};

export const getGetNovelsNovelIdChaptersChapterNumberInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getNovelsNovelIdChaptersChapterNumber>>,
  TError = ErrorType<void>,
>(
  novelId: number,
  chapterNumber: number,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getNovelsNovelIdChaptersChapterNumber>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetNovelsNovelIdChaptersChapterNumberQueryKey(novelId, chapterNumber);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNovelsNovelIdChaptersChapterNumber>>
  > = ({ signal }) =>
    getNovelsNovelIdChaptersChapterNumber(novelId, chapterNumber, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(novelId && chapterNumber),
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getNovelsNovelIdChaptersChapterNumber>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetNovelsNovelIdChaptersChapterNumberInfiniteQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof getNovelsNovelIdChaptersChapterNumber>>
  >;
export type GetNovelsNovelIdChaptersChapterNumberInfiniteQueryError =
  ErrorType<void>;

/**
 * @summary Á´†Ë©≥Á¥∞ÂèñÂæó
 */

export function useGetNovelsNovelIdChaptersChapterNumberInfinite<
  TData = Awaited<ReturnType<typeof getNovelsNovelIdChaptersChapterNumber>>,
  TError = ErrorType<void>,
>(
  novelId: number,
  chapterNumber: number,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getNovelsNovelIdChaptersChapterNumber>>,
      TError,
      TData
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions =
    getGetNovelsNovelIdChaptersChapterNumberInfiniteQueryOptions(
      novelId,
      chapterNumber,
      options,
    );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetNovelsNovelIdChaptersChapterNumberQueryOptions = <
  TData = Awaited<ReturnType<typeof getNovelsNovelIdChaptersChapterNumber>>,
  TError = ErrorType<void>,
>(
  novelId: number,
  chapterNumber: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getNovelsNovelIdChaptersChapterNumber>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetNovelsNovelIdChaptersChapterNumberQueryKey(novelId, chapterNumber);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNovelsNovelIdChaptersChapterNumber>>
  > = ({ signal }) =>
    getNovelsNovelIdChaptersChapterNumber(novelId, chapterNumber, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(novelId && chapterNumber),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getNovelsNovelIdChaptersChapterNumber>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetNovelsNovelIdChaptersChapterNumberQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNovelsNovelIdChaptersChapterNumber>>
>;
export type GetNovelsNovelIdChaptersChapterNumberQueryError = ErrorType<void>;

/**
 * @summary Á´†Ë©≥Á¥∞ÂèñÂæó
 */

export function useGetNovelsNovelIdChaptersChapterNumber<
  TData = Awaited<ReturnType<typeof getNovelsNovelIdChaptersChapterNumber>>,
  TError = ErrorType<void>,
>(
  novelId: number,
  chapterNumber: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getNovelsNovelIdChaptersChapterNumber>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetNovelsNovelIdChaptersChapterNumberQueryOptions(
    novelId,
    chapterNumber,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÊåáÂÆöÁ´†„ÅÆÂÜÖÂÆπ„ÇíÊõ¥Êñ∞
 * @summary Á´†Êõ¥Êñ∞
 */
export const putNovelsNovelIdChaptersChapterNumber = (
  novelId: number,
  chapterNumber: number,
  chapterUpdate: ChapterUpdate,
) => {
  return customInstance<Chapter>({
    url: `http://localhost:8080/api/novels/${novelId}/chapters/${chapterNumber}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: chapterUpdate,
  });
};

export const getPutNovelsNovelIdChaptersChapterNumberMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putNovelsNovelIdChaptersChapterNumber>>,
    TError,
    { novelId: number; chapterNumber: number; data: ChapterUpdate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putNovelsNovelIdChaptersChapterNumber>>,
  TError,
  { novelId: number; chapterNumber: number; data: ChapterUpdate },
  TContext
> => {
  const mutationKey = ["putNovelsNovelIdChaptersChapterNumber"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putNovelsNovelIdChaptersChapterNumber>>,
    { novelId: number; chapterNumber: number; data: ChapterUpdate }
  > = (props) => {
    const { novelId, chapterNumber, data } = props ?? {};

    return putNovelsNovelIdChaptersChapterNumber(novelId, chapterNumber, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutNovelsNovelIdChaptersChapterNumberMutationResult = NonNullable<
  Awaited<ReturnType<typeof putNovelsNovelIdChaptersChapterNumber>>
>;
export type PutNovelsNovelIdChaptersChapterNumberMutationBody = ChapterUpdate;
export type PutNovelsNovelIdChaptersChapterNumberMutationError =
  ErrorType<void>;

/**
 * @summary Á´†Êõ¥Êñ∞
 */
export const usePutNovelsNovelIdChaptersChapterNumber = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putNovelsNovelIdChaptersChapterNumber>>,
    TError,
    { novelId: number; chapterNumber: number; data: ChapterUpdate },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putNovelsNovelIdChaptersChapterNumber>>,
  TError,
  { novelId: number; chapterNumber: number; data: ChapterUpdate },
  TContext
> => {
  const mutationOptions =
    getPutNovelsNovelIdChaptersChapterNumberMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * ÊåáÂÆöÁ´†„ÇíÂâäÈô§
 * @summary Á´†ÂâäÈô§
 */
export const deleteNovelsNovelIdChaptersChapterNumber = (
  novelId: number,
  chapterNumber: number,
) => {
  return customInstance<void>({
    url: `http://localhost:8080/api/novels/${novelId}/chapters/${chapterNumber}`,
    method: "DELETE",
  });
};

export const getDeleteNovelsNovelIdChaptersChapterNumberMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteNovelsNovelIdChaptersChapterNumber>>,
    TError,
    { novelId: number; chapterNumber: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteNovelsNovelIdChaptersChapterNumber>>,
  TError,
  { novelId: number; chapterNumber: number },
  TContext
> => {
  const mutationKey = ["deleteNovelsNovelIdChaptersChapterNumber"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteNovelsNovelIdChaptersChapterNumber>>,
    { novelId: number; chapterNumber: number }
  > = (props) => {
    const { novelId, chapterNumber } = props ?? {};

    return deleteNovelsNovelIdChaptersChapterNumber(novelId, chapterNumber);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteNovelsNovelIdChaptersChapterNumberMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof deleteNovelsNovelIdChaptersChapterNumber>>
  >;

export type DeleteNovelsNovelIdChaptersChapterNumberMutationError =
  ErrorType<void>;

/**
 * @summary Á´†ÂâäÈô§
 */
export const useDeleteNovelsNovelIdChaptersChapterNumber = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteNovelsNovelIdChaptersChapterNumber>>,
    TError,
    { novelId: number; chapterNumber: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteNovelsNovelIdChaptersChapterNumber>>,
  TError,
  { novelId: number; chapterNumber: number },
  TContext
> => {
  const mutationOptions =
    getDeleteNovelsNovelIdChaptersChapterNumberMutationOptions(options);

  return useMutation(mutationOptions);
};
