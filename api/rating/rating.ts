/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Novel Plus API
 * 小説共有プラットフォームのAPI仕様
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type { Rating } from "../../../types/schemas-rating";
import type { PostNovelsIdRatingBody } from "../../../types";

import { customInstance } from "../../custom-instance";
import type { ErrorType } from "../../custom-instance";

/**
 * 指定小説に評価を追加または更新
 * @summary 評価追加・更新
 */
export const postNovelsIdRating = (
  id: number,
  postNovelsIdRatingBody: PostNovelsIdRatingBody,
  signal?: AbortSignal,
) => {
  return customInstance<Rating>({
    url: `http://localhost:8080/api/novels/${id}/rating`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: postNovelsIdRatingBody,
    signal,
  });
};

export const getPostNovelsIdRatingMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postNovelsIdRating>>,
    TError,
    { id: number; data: PostNovelsIdRatingBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postNovelsIdRating>>,
  TError,
  { id: number; data: PostNovelsIdRatingBody },
  TContext
> => {
  const mutationKey = ["postNovelsIdRating"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postNovelsIdRating>>,
    { id: number; data: PostNovelsIdRatingBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return postNovelsIdRating(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostNovelsIdRatingMutationResult = NonNullable<
  Awaited<ReturnType<typeof postNovelsIdRating>>
>;
export type PostNovelsIdRatingMutationBody = PostNovelsIdRatingBody;
export type PostNovelsIdRatingMutationError = ErrorType<void>;

/**
 * @summary 評価追加・更新
 */
export const usePostNovelsIdRating = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postNovelsIdRating>>,
    TError,
    { id: number; data: PostNovelsIdRatingBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postNovelsIdRating>>,
  TError,
  { id: number; data: PostNovelsIdRatingBody },
  TContext
> => {
  const mutationOptions = getPostNovelsIdRatingMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * 指定小説の評価を削除
 * @summary 評価削除
 */
export const deleteNovelsIdRating = (id: number) => {
  return customInstance<void>({
    url: `http://localhost:8080/api/novels/${id}/rating`,
    method: "DELETE",
  });
};

export const getDeleteNovelsIdRatingMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteNovelsIdRating>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteNovelsIdRating>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["deleteNovelsIdRating"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteNovelsIdRating>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteNovelsIdRating(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteNovelsIdRatingMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteNovelsIdRating>>
>;

export type DeleteNovelsIdRatingMutationError = ErrorType<void>;

/**
 * @summary 評価削除
 */
export const useDeleteNovelsIdRating = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteNovelsIdRating>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteNovelsIdRating>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteNovelsIdRatingMutationOptions(options);

  return useMutation(mutationOptions);
};
