/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Novel Plus API
 * Â∞èË™¨ÂÖ±Êúâ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„ÅÆAPI‰ªïÊßò
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  GetUsers200,
  GetUsersIdBookmarks200,
  GetUsersIdBookmarksParams,
  GetUsersIdNovels200,
  GetUsersIdNovelsParams,
  GetUsersParams,
  PutUsersIdBody,
} from "../../../types";
import type { User } from "../../../types/schemas-user";
import type { DefaultError } from "../../../types/schemas-error";

import { customInstance } from "../../custom-instance";
import type { ErrorType } from "../../custom-instance";

/**
 * „É¶„Éº„Ç∂„Éº‰∏ÄË¶ß„Çí„Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥‰ªò„Åç„ÅßÂèñÂæó
 * @summary „É¶„Éº„Ç∂„Éº‰∏ÄË¶ßÂèñÂæó
 */
export const getUsers = (params?: GetUsersParams, signal?: AbortSignal) => {
  return customInstance<GetUsers200>({
    url: `http://localhost:8080/api/users`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetUsersQueryKey = (params?: GetUsersParams) => {
  return [
    `http://localhost:8080/api/users`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetUsersInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = ErrorType<unknown>,
>(
  params?: GetUsersParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getUsers>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsers>>> = ({
    signal,
    pageParam,
  }) =>
    getUsers(
      { ...params, nextPage: pageParam || params?.["nextPage"] },
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getUsers>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUsersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsers>>
>;
export type GetUsersInfiniteQueryError = ErrorType<unknown>;

/**
 * @summary „É¶„Éº„Ç∂„Éº‰∏ÄË¶ßÂèñÂæó
 */

export function useGetUsersInfinite<
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = ErrorType<unknown>,
>(
  params?: GetUsersParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getUsers>>,
      TError,
      TData
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUsersInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = ErrorType<unknown>,
>(
  params?: GetUsersParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsers>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsers>>> = ({
    signal,
  }) => getUsers(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsers>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsers>>
>;
export type GetUsersQueryError = ErrorType<unknown>;

/**
 * @summary „É¶„Éº„Ç∂„Éº‰∏ÄË¶ßÂèñÂæó
 */

export function useGetUsers<
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = ErrorType<unknown>,
>(
  params?: GetUsersParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsers>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUsersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÊåáÂÆöID„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
 * @summary „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±ÂèñÂæó
 */
export const getUsersId = (id: number, signal?: AbortSignal) => {
  return customInstance<User>({
    url: `http://localhost:8080/api/users/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetUsersIdQueryKey = (id: number) => {
  return [`http://localhost:8080/api/users/${id}`] as const;
};

export const getGetUsersIdInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersId>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getUsersId>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersId>>> = ({
    signal,
  }) => getUsersId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getUsersId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUsersIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersId>>
>;
export type GetUsersIdInfiniteQueryError = ErrorType<void>;

/**
 * @summary „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±ÂèñÂæó
 */

export function useGetUsersIdInfinite<
  TData = Awaited<ReturnType<typeof getUsersId>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getUsersId>>,
      TError,
      TData
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUsersIdInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetUsersIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersId>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsersId>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersId>>> = ({
    signal,
  }) => getUsersId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUsersIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersId>>
>;
export type GetUsersIdQueryError = ErrorType<void>;

/**
 * @summary „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±ÂèñÂæó
 */

export function useGetUsersId<
  TData = Awaited<ReturnType<typeof getUsersId>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsersId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUsersIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÊõ¥Êñ∞„Åô„Çã
 * @summary „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±Êõ¥Êñ∞
 */
export const putUsersId = (id: number, putUsersIdBody: PutUsersIdBody) => {
  return customInstance<User>({
    url: `http://localhost:8080/api/users/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: putUsersIdBody,
  });
};

export const getPutUsersIdMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putUsersId>>,
    TError,
    { id: number; data: PutUsersIdBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putUsersId>>,
  TError,
  { id: number; data: PutUsersIdBody },
  TContext
> => {
  const mutationKey = ["putUsersId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putUsersId>>,
    { id: number; data: PutUsersIdBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return putUsersId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutUsersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putUsersId>>
>;
export type PutUsersIdMutationBody = PutUsersIdBody;
export type PutUsersIdMutationError = ErrorType<void>;

/**
 * @summary „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±Êõ¥Êñ∞
 */
export const usePutUsersId = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putUsersId>>,
    TError,
    { id: number; data: PutUsersIdBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putUsersId>>,
  TError,
  { id: number; data: PutUsersIdBody },
  TContext
> => {
  const mutationOptions = getPutUsersIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * „É≠„Ç∞„Ç§„É≥„É¶„Éº„Ç∂„ÉºËá™Ë∫´„ÅÆÊÉÖÂ†±„ÇíÂèñÂæó
 * @summary Ëá™Ë∫´„ÅÆ„Éó„É≠„Éï„Ç£„Éº„É´ÂèñÂæó
 */
export const getUsersMe = (signal?: AbortSignal) => {
  return customInstance<User>({
    url: `http://localhost:8080/api/users/me`,
    method: "GET",
    signal,
  });
};

export const getGetUsersMeQueryKey = () => {
  return [`http://localhost:8080/api/users/me`] as const;
};

export const getGetUsersMeInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersMe>>,
  TError = ErrorType<DefaultError>,
>(options?: {
  query?: UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getUsersMe>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersMe>>> = ({
    signal,
  }) => getUsersMe(signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getUsersMe>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUsersMeInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersMe>>
>;
export type GetUsersMeInfiniteQueryError = ErrorType<DefaultError>;

/**
 * @summary Ëá™Ë∫´„ÅÆ„Éó„É≠„Éï„Ç£„Éº„É´ÂèñÂæó
 */

export function useGetUsersMeInfinite<
  TData = Awaited<ReturnType<typeof getUsersMe>>,
  TError = ErrorType<DefaultError>,
>(options?: {
  query?: UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getUsersMe>>,
    TError,
    TData
  >;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUsersMeInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetUsersMeQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersMe>>,
  TError = ErrorType<DefaultError>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getUsersMe>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersMe>>> = ({
    signal,
  }) => getUsersMe(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersMe>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUsersMeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersMe>>
>;
export type GetUsersMeQueryError = ErrorType<DefaultError>;

/**
 * @summary Ëá™Ë∫´„ÅÆ„Éó„É≠„Éï„Ç£„Éº„É´ÂèñÂæó
 */

export function useGetUsersMe<
  TData = Awaited<ReturnType<typeof getUsersMe>>,
  TError = ErrorType<DefaultError>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getUsersMe>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUsersMeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÊåáÂÆö„É¶„Éº„Ç∂„Éº„ÅåÊäïÁ®ø„Åó„ÅüÂ∞èË™¨‰∏ÄË¶ß„ÇíÂèñÂæó
 * @summary „É¶„Éº„Ç∂„Éº„ÅÆÂ∞èË™¨‰∏ÄË¶ßÂèñÂæó
 */
export const getUsersIdNovels = (
  id: number,
  params?: GetUsersIdNovelsParams,
  signal?: AbortSignal,
) => {
  return customInstance<GetUsersIdNovels200>({
    url: `http://localhost:8080/api/users/${id}/novels`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetUsersIdNovelsQueryKey = (
  id: number,
  params?: GetUsersIdNovelsParams,
) => {
  return [
    `http://localhost:8080/api/users/${id}/novels`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetUsersIdNovelsInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersIdNovels>>,
  TError = ErrorType<void>,
>(
  id: number,
  params?: GetUsersIdNovelsParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getUsersIdNovels>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUsersIdNovelsQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUsersIdNovels>>
  > = ({ signal, pageParam }) =>
    getUsersIdNovels(
      id,
      { ...params, nextPage: pageParam || params?.["nextPage"] },
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getUsersIdNovels>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUsersIdNovelsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersIdNovels>>
>;
export type GetUsersIdNovelsInfiniteQueryError = ErrorType<void>;

/**
 * @summary „É¶„Éº„Ç∂„Éº„ÅÆÂ∞èË™¨‰∏ÄË¶ßÂèñÂæó
 */

export function useGetUsersIdNovelsInfinite<
  TData = Awaited<ReturnType<typeof getUsersIdNovels>>,
  TError = ErrorType<void>,
>(
  id: number,
  params?: GetUsersIdNovelsParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getUsersIdNovels>>,
      TError,
      TData
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUsersIdNovelsInfiniteQueryOptions(
    id,
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetUsersIdNovelsQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersIdNovels>>,
  TError = ErrorType<void>,
>(
  id: number,
  params?: GetUsersIdNovelsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsersIdNovels>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUsersIdNovelsQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUsersIdNovels>>
  > = ({ signal }) => getUsersIdNovels(id, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersIdNovels>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUsersIdNovelsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersIdNovels>>
>;
export type GetUsersIdNovelsQueryError = ErrorType<void>;

/**
 * @summary „É¶„Éº„Ç∂„Éº„ÅÆÂ∞èË™¨‰∏ÄË¶ßÂèñÂæó
 */

export function useGetUsersIdNovels<
  TData = Awaited<ReturnType<typeof getUsersIdNovels>>,
  TError = ErrorType<void>,
>(
  id: number,
  params?: GetUsersIdNovelsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsersIdNovels>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUsersIdNovelsQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÊåáÂÆö„É¶„Éº„Ç∂„Éº„Åå„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„Åó„ÅüÂ∞èË™¨‰∏ÄË¶ß„ÇíÂèñÂæó
 * @summary „É¶„Éº„Ç∂„Éº„ÅÆ„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ‰∏ÄË¶ßÂèñÂæó
 */
export const getUsersIdBookmarks = (
  id: number,
  params?: GetUsersIdBookmarksParams,
  signal?: AbortSignal,
) => {
  return customInstance<GetUsersIdBookmarks200>({
    url: `http://localhost:8080/api/users/${id}/bookmarks`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetUsersIdBookmarksQueryKey = (
  id: number,
  params?: GetUsersIdBookmarksParams,
) => {
  return [
    `http://localhost:8080/api/users/${id}/bookmarks`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetUsersIdBookmarksInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersIdBookmarks>>,
  TError = ErrorType<void>,
>(
  id: number,
  params?: GetUsersIdBookmarksParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getUsersIdBookmarks>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUsersIdBookmarksQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUsersIdBookmarks>>
  > = ({ signal, pageParam }) =>
    getUsersIdBookmarks(
      id,
      { ...params, nextPage: pageParam || params?.["nextPage"] },
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getUsersIdBookmarks>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUsersIdBookmarksInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersIdBookmarks>>
>;
export type GetUsersIdBookmarksInfiniteQueryError = ErrorType<void>;

/**
 * @summary „É¶„Éº„Ç∂„Éº„ÅÆ„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ‰∏ÄË¶ßÂèñÂæó
 */

export function useGetUsersIdBookmarksInfinite<
  TData = Awaited<ReturnType<typeof getUsersIdBookmarks>>,
  TError = ErrorType<void>,
>(
  id: number,
  params?: GetUsersIdBookmarksParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getUsersIdBookmarks>>,
      TError,
      TData
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUsersIdBookmarksInfiniteQueryOptions(
    id,
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetUsersIdBookmarksQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersIdBookmarks>>,
  TError = ErrorType<void>,
>(
  id: number,
  params?: GetUsersIdBookmarksParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsersIdBookmarks>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUsersIdBookmarksQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUsersIdBookmarks>>
  > = ({ signal }) => getUsersIdBookmarks(id, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersIdBookmarks>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUsersIdBookmarksQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersIdBookmarks>>
>;
export type GetUsersIdBookmarksQueryError = ErrorType<void>;

/**
 * @summary „É¶„Éº„Ç∂„Éº„ÅÆ„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ‰∏ÄË¶ßÂèñÂæó
 */

export function useGetUsersIdBookmarks<
  TData = Awaited<ReturnType<typeof getUsersIdBookmarks>>,
  TError = ErrorType<void>,
>(
  id: number,
  params?: GetUsersIdBookmarksParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsersIdBookmarks>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUsersIdBookmarksQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
