/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Novel Plus API
 * Â∞èË™¨ÂÖ±Êúâ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„ÅÆAPI‰ªïÊßò
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  GetNovels200,
  GetNovelsParams,
} from "../../../novel-plus-backend-hono/src/generated/types";
import type {
  Novel,
  NovelCreate,
  NovelDetail,
  NovelUpdate,
} from "../../../novel-plus-backend-hono/src/generated/types/schemas-novel";
import type { DefaultError } from "../../../novel-plus-backend-hono/src/generated/types/schemas-error";
import type {
  Chapter,
  ChapterCreate,
} from "../../../novel-plus-backend-hono/src/generated/types/schemas-chapter";

import { customInstance } from "../../lib/custom-instance";
import type { ErrorType } from "../../lib/custom-instance";

/**
 * Â∞èË™¨‰∏ÄË¶ß„Çí„Éï„Ç£„É´„Çø„É™„É≥„Ç∞„Éª„ÇΩ„Éº„Éà„Åó„Å¶ÂèñÂæó
 * @summary Â∞èË™¨‰∏ÄË¶ßÂèñÂæó
 */
export const getNovels = (params?: GetNovelsParams, signal?: AbortSignal) => {
  return customInstance<GetNovels200>({
    url: `http://localhost:8080/api/novels`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetNovelsQueryKey = (params?: GetNovelsParams) => {
  return [
    `http://localhost:8080/api/novels`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetNovelsInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getNovels>>,
  TError = ErrorType<unknown>,
>(
  params?: GetNovelsParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getNovels>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNovelsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNovels>>> = ({
    signal,
    pageParam,
  }) =>
    getNovels(
      { ...params, nextPage: pageParam || params?.["nextPage"] },
      signal,
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getNovels>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetNovelsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNovels>>
>;
export type GetNovelsInfiniteQueryError = ErrorType<unknown>;

/**
 * @summary Â∞èË™¨‰∏ÄË¶ßÂèñÂæó
 */

export function useGetNovelsInfinite<
  TData = Awaited<ReturnType<typeof getNovels>>,
  TError = ErrorType<unknown>,
>(
  params?: GetNovelsParams,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getNovels>>,
      TError,
      TData
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetNovelsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetNovelsQueryOptions = <
  TData = Awaited<ReturnType<typeof getNovels>>,
  TError = ErrorType<unknown>,
>(
  params?: GetNovelsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getNovels>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNovelsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNovels>>> = ({
    signal,
  }) => getNovels(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getNovels>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetNovelsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNovels>>
>;
export type GetNovelsQueryError = ErrorType<unknown>;

/**
 * @summary Â∞èË™¨‰∏ÄË¶ßÂèñÂæó
 */

export function useGetNovels<
  TData = Awaited<ReturnType<typeof getNovels>>,
  TError = ErrorType<unknown>,
>(
  params?: GetNovelsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getNovels>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetNovelsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Êñ∞„Åó„ÅÑÂ∞èË™¨„Çí‰ΩúÊàê
 * @summary Â∞èË™¨‰ΩúÊàê
 */
export const postNovels = (novelCreate: NovelCreate, signal?: AbortSignal) => {
  return customInstance<Novel>({
    url: `http://localhost:8080/api/novels`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: novelCreate,
    signal,
  });
};

export const getPostNovelsMutationOptions = <
  TError = ErrorType<DefaultError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postNovels>>,
    TError,
    { data: NovelCreate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postNovels>>,
  TError,
  { data: NovelCreate },
  TContext
> => {
  const mutationKey = ["postNovels"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postNovels>>,
    { data: NovelCreate }
  > = (props) => {
    const { data } = props ?? {};

    return postNovels(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostNovelsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postNovels>>
>;
export type PostNovelsMutationBody = NovelCreate;
export type PostNovelsMutationError = ErrorType<DefaultError>;

/**
 * @summary Â∞èË™¨‰ΩúÊàê
 */
export const usePostNovels = <
  TError = ErrorType<DefaultError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postNovels>>,
    TError,
    { data: NovelCreate },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postNovels>>,
  TError,
  { data: NovelCreate },
  TContext
> => {
  const mutationOptions = getPostNovelsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * ÊåáÂÆöID„ÅÆÂ∞èË™¨Ë©≥Á¥∞„ÇíÂèñÂæó
 * @summary Â∞èË™¨Ë©≥Á¥∞ÂèñÂæó
 */
export const getNovelsId = (id: number, signal?: AbortSignal) => {
  return customInstance<NovelDetail>({
    url: `http://localhost:8080/api/novels/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetNovelsIdQueryKey = (id: number) => {
  return [`http://localhost:8080/api/novels/${id}`] as const;
};

export const getGetNovelsIdInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getNovelsId>>,
  TError = ErrorType<DefaultError>,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getNovelsId>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNovelsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNovelsId>>> = ({
    signal,
  }) => getNovelsId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getNovelsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetNovelsIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNovelsId>>
>;
export type GetNovelsIdInfiniteQueryError = ErrorType<DefaultError>;

/**
 * @summary Â∞èË™¨Ë©≥Á¥∞ÂèñÂæó
 */

export function useGetNovelsIdInfinite<
  TData = Awaited<ReturnType<typeof getNovelsId>>,
  TError = ErrorType<DefaultError>,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getNovelsId>>,
      TError,
      TData
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetNovelsIdInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetNovelsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getNovelsId>>,
  TError = ErrorType<DefaultError>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getNovelsId>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNovelsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNovelsId>>> = ({
    signal,
  }) => getNovelsId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getNovelsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetNovelsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNovelsId>>
>;
export type GetNovelsIdQueryError = ErrorType<DefaultError>;

/**
 * @summary Â∞èË™¨Ë©≥Á¥∞ÂèñÂæó
 */

export function useGetNovelsId<
  TData = Awaited<ReturnType<typeof getNovelsId>>,
  TError = ErrorType<DefaultError>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getNovelsId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetNovelsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Â∞èË™¨ÊÉÖÂ†±„ÇíÊõ¥Êñ∞
 * @summary Â∞èË™¨Êõ¥Êñ∞
 */
export const putNovelsId = (id: number, novelUpdate: NovelUpdate) => {
  return customInstance<Novel>({
    url: `http://localhost:8080/api/novels/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: novelUpdate,
  });
};

export const getPutNovelsIdMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putNovelsId>>,
    TError,
    { id: number; data: NovelUpdate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putNovelsId>>,
  TError,
  { id: number; data: NovelUpdate },
  TContext
> => {
  const mutationKey = ["putNovelsId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putNovelsId>>,
    { id: number; data: NovelUpdate }
  > = (props) => {
    const { id, data } = props ?? {};

    return putNovelsId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutNovelsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putNovelsId>>
>;
export type PutNovelsIdMutationBody = NovelUpdate;
export type PutNovelsIdMutationError = ErrorType<void>;

/**
 * @summary Â∞èË™¨Êõ¥Êñ∞
 */
export const usePutNovelsId = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putNovelsId>>,
    TError,
    { id: number; data: NovelUpdate },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putNovelsId>>,
  TError,
  { id: number; data: NovelUpdate },
  TContext
> => {
  const mutationOptions = getPutNovelsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * ÊåáÂÆöID„ÅÆÂ∞èË™¨„ÇíÂâäÈô§
 * @summary Â∞èË™¨ÂâäÈô§
 */
export const deleteNovelsId = (id: number) => {
  return customInstance<void>({
    url: `http://localhost:8080/api/novels/${id}`,
    method: "DELETE",
  });
};

export const getDeleteNovelsIdMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteNovelsId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteNovelsId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["deleteNovelsId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteNovelsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteNovelsId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteNovelsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteNovelsId>>
>;

export type DeleteNovelsIdMutationError = ErrorType<void>;

/**
 * @summary Â∞èË™¨ÂâäÈô§
 */
export const useDeleteNovelsId = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteNovelsId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteNovelsId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteNovelsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * ÊåáÂÆöÂ∞èË™¨„ÅÆÁ´†‰∏ÄË¶ß„ÇíÂèñÂæó
 * @summary Â∞èË™¨„ÅÆÁ´†‰∏ÄË¶ßÂèñÂæó
 */
export const getNovelsIdChapters = (id: number, signal?: AbortSignal) => {
  return customInstance<Chapter[]>({
    url: `http://localhost:8080/api/novels/${id}/chapters`,
    method: "GET",
    signal,
  });
};

export const getGetNovelsIdChaptersQueryKey = (id: number) => {
  return [`http://localhost:8080/api/novels/${id}/chapters`] as const;
};

export const getGetNovelsIdChaptersInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getNovelsIdChapters>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getNovelsIdChapters>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNovelsIdChaptersQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNovelsIdChapters>>
  > = ({ signal }) => getNovelsIdChapters(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getNovelsIdChapters>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetNovelsIdChaptersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNovelsIdChapters>>
>;
export type GetNovelsIdChaptersInfiniteQueryError = ErrorType<void>;

/**
 * @summary Â∞èË™¨„ÅÆÁ´†‰∏ÄË¶ßÂèñÂæó
 */

export function useGetNovelsIdChaptersInfinite<
  TData = Awaited<ReturnType<typeof getNovelsIdChapters>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getNovelsIdChapters>>,
      TError,
      TData
    >;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetNovelsIdChaptersInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetNovelsIdChaptersQueryOptions = <
  TData = Awaited<ReturnType<typeof getNovelsIdChapters>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getNovelsIdChapters>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNovelsIdChaptersQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNovelsIdChapters>>
  > = ({ signal }) => getNovelsIdChapters(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getNovelsIdChapters>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetNovelsIdChaptersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNovelsIdChapters>>
>;
export type GetNovelsIdChaptersQueryError = ErrorType<void>;

/**
 * @summary Â∞èË™¨„ÅÆÁ´†‰∏ÄË¶ßÂèñÂæó
 */

export function useGetNovelsIdChapters<
  TData = Awaited<ReturnType<typeof getNovelsIdChapters>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getNovelsIdChapters>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetNovelsIdChaptersQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÊåáÂÆöÂ∞èË™¨„Å´Êñ∞„Åó„ÅÑÁ´†„ÇíËøΩÂä†
 * @summary Á´†‰ΩúÊàê
 */
export const postNovelsIdChapters = (
  id: number,
  chapterCreate: ChapterCreate,
  signal?: AbortSignal,
) => {
  return customInstance<Chapter>({
    url: `http://localhost:8080/api/novels/${id}/chapters`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: chapterCreate,
    signal,
  });
};

export const getPostNovelsIdChaptersMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postNovelsIdChapters>>,
    TError,
    { id: number; data: ChapterCreate },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postNovelsIdChapters>>,
  TError,
  { id: number; data: ChapterCreate },
  TContext
> => {
  const mutationKey = ["postNovelsIdChapters"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postNovelsIdChapters>>,
    { id: number; data: ChapterCreate }
  > = (props) => {
    const { id, data } = props ?? {};

    return postNovelsIdChapters(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostNovelsIdChaptersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postNovelsIdChapters>>
>;
export type PostNovelsIdChaptersMutationBody = ChapterCreate;
export type PostNovelsIdChaptersMutationError = ErrorType<void>;

/**
 * @summary Á´†‰ΩúÊàê
 */
export const usePostNovelsIdChapters = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postNovelsIdChapters>>,
    TError,
    { id: number; data: ChapterCreate },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postNovelsIdChapters>>,
  TError,
  { id: number; data: ChapterCreate },
  TContext
> => {
  const mutationOptions = getPostNovelsIdChaptersMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Â∞èË™¨„ÅÆÈñ≤Ë¶ß„ÇíË®òÈå≤„Åô„Çã
 * @summary Èñ≤Ë¶ßË®òÈå≤
 */
export const postNovelsIdView = (id: number, signal?: AbortSignal) => {
  return customInstance<void>({
    url: `http://localhost:8080/api/novels/${id}/view`,
    method: "POST",
    signal,
  });
};

export const getPostNovelsIdViewMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postNovelsIdView>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postNovelsIdView>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["postNovelsIdView"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postNovelsIdView>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return postNovelsIdView(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostNovelsIdViewMutationResult = NonNullable<
  Awaited<ReturnType<typeof postNovelsIdView>>
>;

export type PostNovelsIdViewMutationError = ErrorType<void>;

/**
 * @summary Èñ≤Ë¶ßË®òÈå≤
 */
export const usePostNovelsIdView = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postNovelsIdView>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postNovelsIdView>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getPostNovelsIdViewMutationOptions(options);

  return useMutation(mutationOptions);
};
